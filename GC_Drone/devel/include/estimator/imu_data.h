// Generated by gencpp from file estimator/imu_data.msg
// DO NOT EDIT!


#ifndef ESTIMATOR_MESSAGE_IMU_DATA_H
#define ESTIMATOR_MESSAGE_IMU_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace estimator
{
template <class ContainerAllocator>
struct imu_data_
{
  typedef imu_data_<ContainerAllocator> Type;

  imu_data_()
    : part_name()
    , acceleration()
    , gyro()
    , magentometer()  {
      acceleration.assign(0.0);

      gyro.assign(0.0);

      magentometer.assign(0.0);
  }
  imu_data_(const ContainerAllocator& _alloc)
    : part_name(_alloc)
    , acceleration()
    , gyro()
    , magentometer()  {
  (void)_alloc;
      acceleration.assign(0.0);

      gyro.assign(0.0);

      magentometer.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _part_name_type;
  _part_name_type part_name;

   typedef boost::array<float, 3>  _acceleration_type;
  _acceleration_type acceleration;

   typedef boost::array<float, 3>  _gyro_type;
  _gyro_type gyro;

   typedef boost::array<float, 3>  _magentometer_type;
  _magentometer_type magentometer;





  typedef boost::shared_ptr< ::estimator::imu_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estimator::imu_data_<ContainerAllocator> const> ConstPtr;

}; // struct imu_data_

typedef ::estimator::imu_data_<std::allocator<void> > imu_data;

typedef boost::shared_ptr< ::estimator::imu_data > imu_dataPtr;
typedef boost::shared_ptr< ::estimator::imu_data const> imu_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::estimator::imu_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::estimator::imu_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace estimator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'estimator': ['/home/zolkin/GC_Drone/src/estimator/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::estimator::imu_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::estimator::imu_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::estimator::imu_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::estimator::imu_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::estimator::imu_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::estimator::imu_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::estimator::imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e17c95574e116a26dbc3940045e5e43";
  }

  static const char* value(const ::estimator::imu_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e17c95574e116a2ULL;
  static const uint64_t static_value2 = 0x6dbc3940045e5e43ULL;
};

template<class ContainerAllocator>
struct DataType< ::estimator::imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "estimator/imu_data";
  }

  static const char* value(const ::estimator::imu_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::estimator::imu_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string part_name\n"
"float32[3] acceleration\n"
"float32[3] gyro\n"
"float32[3] magentometer\n"
;
  }

  static const char* value(const ::estimator::imu_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::estimator::imu_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.part_name);
      stream.next(m.acceleration);
      stream.next(m.gyro);
      stream.next(m.magentometer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::estimator::imu_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::estimator::imu_data_<ContainerAllocator>& v)
  {
    s << indent << "part_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.part_name);
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acceleration[i]);
    }
    s << indent << "gyro[]" << std::endl;
    for (size_t i = 0; i < v.gyro.size(); ++i)
    {
      s << indent << "  gyro[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.gyro[i]);
    }
    s << indent << "magentometer[]" << std::endl;
    for (size_t i = 0; i < v.magentometer.size(); ++i)
    {
      s << indent << "  magentometer[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.magentometer[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ESTIMATOR_MESSAGE_IMU_DATA_H
