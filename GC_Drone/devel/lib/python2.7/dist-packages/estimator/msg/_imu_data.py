# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from estimator/imu_data.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class imu_data(genpy.Message):
  _md5sum = "2e17c95574e116a26dbc3940045e5e43"
  _type = "estimator/imu_data"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string part_name
float32[3] acceleration
float32[3] gyro
float32[3] magentometer
"""
  __slots__ = ['part_name','acceleration','gyro','magentometer']
  _slot_types = ['string','float32[3]','float32[3]','float32[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       part_name,acceleration,gyro,magentometer

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(imu_data, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.part_name is None:
        self.part_name = ''
      if self.acceleration is None:
        self.acceleration = [0.] * 3
      if self.gyro is None:
        self.gyro = [0.] * 3
      if self.magentometer is None:
        self.magentometer = [0.] * 3
    else:
      self.part_name = ''
      self.acceleration = [0.] * 3
      self.gyro = [0.] * 3
      self.magentometer = [0.] * 3

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.part_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_3f().pack(*self.acceleration))
      buff.write(_get_struct_3f().pack(*self.gyro))
      buff.write(_get_struct_3f().pack(*self.magentometer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.part_name = str[start:end].decode('utf-8')
      else:
        self.part_name = str[start:end]
      start = end
      end += 12
      self.acceleration = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.gyro = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.magentometer = _get_struct_3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.part_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.acceleration.tostring())
      buff.write(self.gyro.tostring())
      buff.write(self.magentometer.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.part_name = str[start:end].decode('utf-8')
      else:
        self.part_name = str[start:end]
      start = end
      end += 12
      self.acceleration = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.gyro = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.magentometer = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
